{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // Imported user reducer\n// import { setUserId, setAccessToken } from './user';\n\nimport { API_URL } from \"utils/urls\";\nexport const recipe = createSlice({\n  name: \"recipe\",\n  initialState: {\n    items: [],\n    error: null\n  },\n  reducers: {\n    setItems: (store, action) => {\n      store.items = action.payload;\n    },\n    setError: (store, action) => {\n      store.error = action.payload;\n    }\n  }\n}); // Thunk fetchTasks: getting all the users tasks\n\nexport const fetchTasks = (accessToken, userId) => {\n  return dispatch => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        Authorization: accessToken\n      }\n    };\n    fetch(API_URL(`tasks/${userId}`), options).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(todo.actions.setItems(data.response));\n        dispatch(todo.actions.setError(null));\n      } else {\n        dispatch(todo.actions.setItems([]));\n        dispatch(todo.actions.setError(data.response));\n      }\n    });\n  };\n};\nexport const postTasks = (accessToken, userId, task) => {\n  return dispatch => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      },\n      body: JSON.stringify({\n        task,\n        user: userId\n      })\n    };\n    fetch(API_URL(\"tasks/addtask\"), options).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log(data);\n        dispatch(fetchTasks(accessToken, userId));\n        dispatch(todo.actions.setError(null));\n      } else {\n        dispatch(todo.actions.setItems([]));\n        dispatch(todo.actions.setError(data.response));\n      }\n    });\n  };\n}; // export default todo;\n//   toggleRecipe: (store, action) => { //this will display if the checkbox is true or false\n//     store.recipe.forEach((recipe) => {\n//         if (item.id === action.payload) {\n//             item.isLiked = !item.isLiked;\n//         }\n//     })\n// },","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Dokument/Technigo/Finalproject/my-app/frontend/src/reducers/recipes.js"],"names":["createSlice","API_URL","recipe","name","initialState","items","error","reducers","setItems","store","action","payload","setError","fetchTasks","accessToken","userId","dispatch","options","method","headers","Authorization","fetch","then","res","json","data","console","log","success","todo","actions","response","postTasks","task","body","JSON","stringify","user"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;AACA;;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAO,MAAMC,MAAM,GAAGF,WAAW,CAAC;AAChCG,EAAAA,IAAI,EAAE,QAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,KAAK,EAAE;AAFK,GAFkB;AAMhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACC,OAArB;AACD,KAHO;AAIRC,IAAAA,QAAQ,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACD;AANO;AANsB,CAAD,CAA1B,C,CAgBP;;AAEA,OAAO,MAAME,UAAU,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AACjD,SAAQC,QAAD,IAAc;AACnB,UAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEN;AADR;AAFK,KAAhB;AAMAO,IAAAA,KAAK,CAACpB,OAAO,CAAE,SAAQc,MAAO,EAAjB,CAAR,EAA6BE,OAA7B,CAAL,CACGK,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,UAAIA,IAAI,CAACG,OAAT,EAAkB;AAChBZ,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAatB,QAAb,CAAsBiB,IAAI,CAACM,QAA3B,CAAD,CAAR;AACAf,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAalB,QAAb,CAAsB,IAAtB,CAAD,CAAR;AACD,OAHD,MAGO;AACLI,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAatB,QAAb,CAAsB,EAAtB,CAAD,CAAR;AACAQ,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAalB,QAAb,CAAsBa,IAAI,CAACM,QAA3B,CAAD,CAAR;AACD;AACF,KAXH;AAYD,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMC,SAAS,GAAG,CAAClB,WAAD,EAAcC,MAAd,EAAsBkB,IAAtB,KAA+B;AACtD,SAAQjB,QAAD,IAAc;AACnB,UAAMC,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAEN;AAFR,OAFK;AAMdoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA,IAAF;AAAQI,QAAAA,IAAI,EAAEtB;AAAd,OAAf;AANQ,KAAhB;AAQAM,IAAAA,KAAK,CAACpB,OAAO,CAAC,eAAD,CAAR,EAA2BgB,OAA3B,CAAL,CACGK,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,UAAIA,IAAI,CAACG,OAAT,EAAkB;AAChBF,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAT,QAAAA,QAAQ,CAACH,UAAU,CAACC,WAAD,EAAcC,MAAd,CAAX,CAAR;AACAC,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAalB,QAAb,CAAsB,IAAtB,CAAD,CAAR;AACD,OAJD,MAIO;AACLI,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAatB,QAAb,CAAsB,EAAtB,CAAD,CAAR;AACAQ,QAAAA,QAAQ,CAACa,IAAI,CAACC,OAAL,CAAalB,QAAb,CAAsBa,IAAI,CAACM,QAA3B,CAAD,CAAR;AACD;AACF,KAXH;AAYD,GArBD;AAsBD,CAvBM,C,CAyBP;AAEM;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n// Imported user reducer\r\n// import { setUserId, setAccessToken } from './user';\r\nimport { API_URL } from \"utils/urls\";\r\n\r\nexport const recipe = createSlice({\r\n  name: \"recipe\",\r\n  initialState: {\r\n    items: [],\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setItems: (store, action) => {\r\n      store.items = action.payload;\r\n    },\r\n    setError: (store, action) => {\r\n      store.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Thunk fetchTasks: getting all the users tasks\r\n\r\nexport const fetchTasks = (accessToken, userId) => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: accessToken,\r\n      },\r\n    };\r\n    fetch(API_URL(`tasks/${userId}`), options)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.success) {\r\n          dispatch(todo.actions.setItems(data.response));\r\n          dispatch(todo.actions.setError(null));\r\n        } else {\r\n          dispatch(todo.actions.setItems([]));\r\n          dispatch(todo.actions.setError(data.response));\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\nexport const postTasks = (accessToken, userId, task) => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: accessToken,\r\n      },\r\n      body: JSON.stringify({ task, user: userId }),\r\n    };\r\n    fetch(API_URL(\"tasks/addtask\"), options)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          console.log(data);\r\n          dispatch(fetchTasks(accessToken, userId));\r\n          dispatch(todo.actions.setError(null));\r\n        } else {\r\n          dispatch(todo.actions.setItems([]));\r\n          dispatch(todo.actions.setError(data.response));\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\n// export default todo;\r\n\r\n      //   toggleRecipe: (store, action) => { //this will display if the checkbox is true or false\r\n      //     store.recipe.forEach((recipe) => {\r\n      //         if (item.id === action.payload) {\r\n      //             item.isLiked = !item.isLiked;\r\n      //         }\r\n      //     })\r\n      // },"]},"metadata":{},"sourceType":"module"}