{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // Imported user reducer\n// import { setUserId, setAccessToken } from './user';\n// import { API_URL } from \"utils/urls\";\n\nexport const recipe = createSlice({\n  name: \"recipe\",\n  initialState: {\n    items: [],\n    error: null\n  },\n  reducers: {\n    setItems: (store, action) => {\n      store.items = action.payload;\n    },\n    setError: (store, action) => {\n      store.error = action.payload;\n    },\n    toggleRecipe: (store, action) => {\n      //this will display if the like is true or false\n      const updatedRecipeLike = store.items.map(recipe => {\n        if (recipe.id === action.payload) {\n          const updatedLike = { ...recipe,\n            isLiked: !recipe.isLiked\n          };\n          return updatedLike;\n        } else {\n          return recipe;\n        }\n      });\n      store.items = updatedRecipeLike;\n    }\n  }\n}); // Thunk fetchRecipes: getting users recipes\n// Fetch user recipes for profile?????!!!! \n\nexport const fetchRecipes = (accessToken, userId) => {\n  return dispatch => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        Authorization: accessToken\n      }\n    };\n    fetch(API_URL(`recipes/${userId}`), options) //denna behöver läggas till\n    .then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        dispatch(recipe.actions.setItems(data.response));\n        dispatch(recipe.actions.setError(null));\n      } else {\n        dispatch(recipe.actions.setItems([]));\n        dispatch(recipe.actions.setError(data.response));\n      }\n    });\n  };\n}; // Fetch all recipes. Same as above but just /recipes?\n// Post new recipe??????!!! \n\nexport const postRecipe = (accessToken, userId, recipe) => {\n  return dispatch => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: accessToken\n      },\n      body: JSON.stringify({\n        recipe,\n        user: userId\n      })\n    };\n    fetch(API_URL(\"/recipes/\"), options).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log(data);\n        dispatch(fetchRecipes(accessToken, userId));\n        dispatch(recipe.actions.setError(null));\n      } else {\n        dispatch(recipe.actions.setItems([]));\n        dispatch(recipe.actions.setError(data.response));\n      }\n    });\n  };\n}; // export default todo;\n//   toggleRecipe: (store, action) => { //this will display if the checkbox is true or false\n//     store.recipe.forEach((recipe) => {\n//         if (item.id === action.payload) {\n//             item.isLiked = !item.isLiked;\n//         }\n//     })\n// },","map":{"version":3,"sources":["C:/Users/jessi/OneDrive/Dokument/Technigo/Finalproject/my-app/frontend/src/reducers/recipes.js"],"names":["createSlice","recipe","name","initialState","items","error","reducers","setItems","store","action","payload","setError","toggleRecipe","updatedRecipeLike","map","id","updatedLike","isLiked","fetchRecipes","accessToken","userId","dispatch","options","method","headers","Authorization","fetch","API_URL","then","res","json","data","console","log","success","actions","response","postRecipe","body","JSON","stringify","user"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n// Imported user reducer\r\n// import { setUserId, setAccessToken } from './user';\r\n// import { API_URL } from \"utils/urls\";\r\n\r\nexport const recipe = createSlice({\r\n  name: \"recipe\",\r\n  initialState: {\r\n    items: [],\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    setItems: (store, action) => {\r\n      store.items = action.payload;\r\n    },\r\n    setError: (store, action) => {\r\n      store.error = action.payload;\r\n    },\r\n    toggleRecipe: (store, action) => { //this will display if the like is true or false\r\n      const updatedRecipeLike = store.items.map((recipe) => {\r\n        if (recipe.id === action.payload) {\r\n          const updatedLike = {\r\n            ...recipe, \r\n            isLiked: !recipe.isLiked,\r\n          }\r\n          return updatedLike;\r\n        } else {\r\n          return recipe;\r\n        }\r\n      })\r\n      store.items = updatedRecipeLike;\r\n    } \r\n  }\r\n})\r\n\r\n\r\n\r\n// Thunk fetchRecipes: getting users recipes\r\n\r\n// Fetch user recipes for profile?????!!!! \r\nexport const fetchRecipes = (accessToken, userId) => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: accessToken,\r\n      },\r\n    };\r\n    fetch(API_URL(`recipes/${userId}`), options) //denna behöver läggas till\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.success) {\r\n          dispatch(recipe.actions.setItems(data.response));\r\n          dispatch(recipe.actions.setError(null));\r\n        } else {\r\n          dispatch(recipe.actions.setItems([]));\r\n          dispatch(recipe.actions.setError(data.response));\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\n// Fetch all recipes. Same as above but just /recipes?\r\n\r\n// Post new recipe??????!!! \r\nexport const postRecipe = (accessToken, userId, recipe) => {\r\n  return (dispatch) => {\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: accessToken,\r\n      },\r\n      body: JSON.stringify({ recipe, user: userId }),\r\n    };\r\n    fetch(API_URL(\"/recipes/\"), options)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          console.log(data);\r\n          dispatch(fetchRecipes(accessToken, userId));\r\n          dispatch(recipe.actions.setError(null));\r\n        } else {\r\n          dispatch(recipe.actions.setItems([]));\r\n          dispatch(recipe.actions.setError(data.response));\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\n// export default todo;\r\n\r\n      //   toggleRecipe: (store, action) => { //this will display if the checkbox is true or false\r\n      //     store.recipe.forEach((recipe) => {\r\n      //         if (item.id === action.payload) {\r\n      //             item.isLiked = !item.isLiked;\r\n      //         }\r\n      //     })\r\n      // },"]},"metadata":{},"sourceType":"module"}